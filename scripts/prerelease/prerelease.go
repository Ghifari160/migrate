package main

import (
	"flag"
	"fmt"
	"io/fs"
	"os"
	"path/filepath"
	"strings"
	"time"
)

const verFile = "version_generated.go"

func main() {
	var verPath, version, confirm string
	var copyYear int
	var noninteractive bool

	verPath = filepath.Join("internal", "ver", verFile)
	version = "0.1.0"
	copyYear = time.Now().Year()

	flag.StringVar(&verPath, "path", verPath, "Set path to version file.")
	flag.StringVar(&version, "ver", version, "Set version.")
	flag.IntVar(&copyYear, "copyyear", copyYear, "Set copyright year.")
	flag.BoolVar(&noninteractive, "noninteractive", false, "Noninteractive mode.")

	flag.Parse()

	if !noninteractive {
		fmt.Printf("Path to version file: (%s) ", verPath)
		fmt.Scanln(&verPath)

		fmt.Printf("Version: (%s) ", version)
		fmt.Scanln(&version)

		fmt.Printf("Copyright Year: (%d) ", copyYear)
		fmt.Scanln(&copyYear)

		prompt := "Path to version file: %s\nVersion: %s\nCopyright Year: %d\nCorrect? (y/n) "
		prompt = fmt.Sprintf(prompt, verPath, version, copyYear)
		confirm = promptUntilValid(prompt, []string{"y", "n"}, false)
	}

	if confirm == "n" {
		os.Exit(0)
	}

	src := genVer(version, copyYear)

	err := os.WriteFile(verPath, []byte(src), fs.FileMode(0644))
	if err != nil {
		fmt.Printf("Error: %v\n", err)
		os.Exit(1)
	}

	fmt.Println("Done")
}

func promptUntilValid(prompt string, valid []string, caseSensitive bool) string {
	var input string
	var inputValid bool

	for {
		fmt.Print(prompt)
		fmt.Scanln(&input)

		inputValid = false
		for _, v := range valid {
			if inputValid {
				break
			}

			if !caseSensitive {
				input = strings.ToLower(input)
				v = strings.ToLower(v)
			}

			inputValid = v == input
		}

		if inputValid {
			break
		}
	}

	return input
}

func genVer(ver string, copyYear int) string {
	template := `//go:build prod
// +build prod

// Generated by scripts/prerelease on %v

package ver

const (
	CopyrightYear = %d
	Version   = "%s"
)
`

	ts := time.Now().Format("2006/01/02 03:04:05 PM")
	return fmt.Sprintf(template, ts, copyYear, ver)
}
